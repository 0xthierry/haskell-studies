{-

Input: [x | x <- [1,2,3]]
Output: [1,2,3]

Input: [x + 1 | x <- [1,2,3]]
Output: [2,3,4]

Input: [x ** 2 | x <- [1,2,3]]
Output: [1.0,4.0,9.0]

Input: [x ** 2 | x <- [1,2,3]]
Output: [1.0,4.0,9.0]

Input: [x * x | x <- [1..10]]
Output: [1,4,9,16,25,36,49,64,81,100]

Input: [x * x | x <- [1..10], mod x 2 == 0]
Output: [4,16,36,64,100]

Input: [(x, y) | x <- [1..5], y <- [5..10]]
Output: [(1,5),(1,6),(1,7),(1,8),(1,9),(1,10),(2,5),(2,6),(2,7),(2,8),(2,9),(2,10),(3,5),(3,6),(3,7),(3,8),(3,9),(3,10),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(5,5),(5,6),(5,7),(5,8),(5,9),(5,10)]

Input: [(x, y) | x <- [1..5], y <- [5..10], isEven x, isEven y]
Output: [(2,6),(2,8),(2,10),(4,6),(4,8),(4,10)]
-}

isEven :: Int -> Bool
isEven x = mod x 2 == 0

greatherThan x n = n > x 
list = [x | x <- [1..1000], isEven x, greatherThan 10 x]

